参见：
Android Training - 高效地显示Bitmap(Lesson 4 - 优化Bitmap的内存使用)
	http://hukai.me/android-training-displaying-bitmaps-efficiently-lesson-4/
mycsdn/那个大图片
	包含内容：
	避免oom
	decodestream
		option
			sampleinsize
	lrucache
	decoderesource
用bitmap.recycle，并不是那么的straightforward
	http://blog.csdn.net/qlsusu/article/details/7836036

尺寸
通过decodeResource()来加载的图片，会进行缩放（当BitmapFactory.Options.inScaled为true时（默认为true））
为什么缩放：设图片的物理宽高为 w,h，其被放在xxhdpi下（对应480），则该图片在某设备上（设dpi为450）时，应该被显示多大
	即是：在480下，我的宽高是 w,h，则，在450下，我的宽高是多少
缩放比例：inTargetDensity / inDensity
	inTargetDensity为目标设备的density
	inDensity：如：如果图片被放在drawable-xxhdpi中，inDensity为480（参见：dpi资源文件夹 对应的 dpi.png）
	也可以自定义inDensity, inTargetDensity：
		BitmapFactory.Options Options = new BitmapFactory.Options();
		Options.inJustDecodeBounds = false;
		Options.inSampleSize = 1;
		//该图片位于哪个density目录下（如：drawable-xxhdpi，则对应了480）
		Options.inDensity = 160;
		//目标设备的density
		Options.inTargetDensity = 160;
		bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.origin, Options);
		// MX4上，虽然density = 3
		// 但是通过设置inTargetDensity / inDensity = 160 / 160 = 1
		// 解码后图片大小为 图片的原始大小
--
BitmapDrawable的尺寸
	BitmapDrawable，其尺寸由getIntrinsicWidth和getIntrinsicHeight给出，
	其值由：bitmap的尺寸（size），在哪个drawable文件下（sdensity），手机自身的dpi（tdensity） 来决定
		公式：尺寸=( (size * tdensity) + (sdensity >> 1) ) / sdensity;  
	在创建对象时，请使用带resource参数的构造函数，否则，认为targetDpi为默认160
	参见：http://blog.csdn.net/jason_wks/article/details/8283224

缓存：
使用LruCache, DiskLruCache
参见：
	cache/
	my/talkingtom中 com.oooo3d.lib.util.ImageCache

释放：
参见：
	com.ql.tool.BitmapTool.recycleBitmap(Bitmap...)
	http://blog.csdn.net/arui319/article/details/7953690
从3.0开始，Bitmap像素数据和Bitmap对象一起存放在Dalvik堆中，而在3.0之前，Bitmap像素数据存放在Native内存中。则在3.0之后，不需要再调用recycle()

缩略图
理解ThumbnailUtils
	http://www.jayfeng.com/2016/03/16/%E7%90%86%E8%A7%A3ThumbnailUtils/
