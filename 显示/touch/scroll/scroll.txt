参见：
scroll示意.png
深入聊聊Android事件分发机制
	http://blog.csdn.net/zhangke3016/article/details/54959569
	其中，open和close是为了通过fling来进行 抽屉的打开和关闭
android自定义布局中的平滑移动
	http://blog.csdn.net/z550946941/article/details/7534971
Android Scroll详解(一)：基础知识
	http://ztelur.github.io/2016/03/27/Android-Scroll%E8%AF%A6%E8%A7%A3-%E4%B8%80-%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/
Android Scroll详解(二)：OverScroller实战
	http://ztelur.github.io/2016/04/07/Android-Scroll%E8%AF%A6%E8%A7%A3-%E4%BA%8C-%EF%BC%9AOverScroller%E5%AE%9E%E6%88%98/
工程translation

是什么：
参见：scroll示意.png

scroll改变的是可视区域（view.mScrollX/Y）
会导致 孩子view.getLocationOnScreen 发生变化
但，其对之下是没有影响的：
. 其不会改变 自身view和孩子view的 dimen（getX/Y（left,translationX 和 top,translationY）、width/height）
	不会导致 自身view和孩子view的 onMeasure/onLayout被调用
. 其并不会导致view的background发生位置变化

scrollto
	滑动到
scrollby
	滑动多少
	到最后，实际上还是调用了scrollto

获得滑动的位置
view.getScrollX/Y

computeScroll为在滑动时的回调
被调用时机：
	scrollxx方法被调用时
	invalidate/postinvalidate方法被调用时

参见：VerticalLinearLayout

判断一个view当前是否可scroll up（当一个view在y方向上，内容很多，能scroll up意味着：此刻，view的当前可见区域上部还是有内容的，可以 向下滑动 来scroll up）：
view.canScrollVertically(-1);

------------------------一个使用场景
在view的touch的某个时机，来启动scroller，
在computeScroll中，判断scroller是否滑动停止（computeScrollOffset），如果没有，根据scroller的滑动位置，来scrollto/by view，
后，postinvalidate，其会让computeScroll再被调用，则后续流程就这样被又一次执行

参考：VerticalLinearLayout

------------------------资料
http://blog.csdn.net/lmj623565791/article/details/23692439
http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1114/558.html
http://www.cnblogs.com/over140/archive/2010/12/16/1907528.html
	