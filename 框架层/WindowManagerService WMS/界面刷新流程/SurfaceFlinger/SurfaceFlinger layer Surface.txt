参见：
Android应用程序与SurfaceFlinger服务的关系概述和学习计划 - CSDN博客
	http://blog.csdn.net/luoshengyang/article/details/7846923

App进程 将待绘制的UI数据写入到 匿名共享内存中
SurfaceFlinger 从该匿名共享内存中 获取UI数据 并绘制到屏幕上

该匿名内存 通过SharedClient（在SurfaceFlinger所在进程） 可被访问到
一个SharedClient对应一个App进程
其内部有32个SharedBufferStack，而每个SharedBufferStack对应一个Surface（即：对应一个ViewRoot（大部分情况下，可以认为对应于一个Window））
	即是：一个App进程，在绘制时，最多允许31个Window来叠加

每个SharedBufferStack内部含有N（[2,16]）个buffer
buffer类型：
	空闲缓冲，区间：[tail, head]
	待绘制缓冲，区间：(head, queue_head]
当App进程要刷新时（提供UI数据）
	请求一个空闲buffer（tail+=1），
	要求SurfaceFlinger提供一个GraphicBuffer，使得buffer关联到该GraphicBuffer
	在GraphicBuffer上填充UI数据
	该buffer成为 待绘制缓冲（queue_head+=1）
当SurfaceFlinger绘制UI数据（合成）时
	根据z-order，针对于待绘制的 Surface对应的SharedBufferStack：
	取出head+1对应的buffer，进行绘制
		绘制完毕后，该buffer成为 空闲缓冲
	待绘制的个数queued-=1
	说明：一次只绘制一个缓冲
